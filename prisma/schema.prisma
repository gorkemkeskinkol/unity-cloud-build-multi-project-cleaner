// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Organization {
  id        String   @id
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  projects Project[]
  
  @@map("organizations")
}

model Project {
  id             String       @id
  name           String
  organizationId String
  description    String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  lastScannedAt  DateTime?
  
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  buildTargets   BuildTarget[]
  scanResults    ScanResult[]
  
  @@map("projects")
}

model BuildTarget {
  id        String   @id
  name      String
  platform  String?
  projectId String
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  project     Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  buildCounts BuildCount[]
  
  @@map("build_targets")
}

model BuildCount {
  id            Int         @id @default(autoincrement())
  buildTargetId String
  count         Int         @default(0)
  scannedAt     DateTime    @default(now())
  scanResultId  String
  
  buildTarget BuildTarget @relation(fields: [buildTargetId], references: [id], onDelete: Cascade)
  scanResult  ScanResult  @relation(fields: [scanResultId], references: [id], onDelete: Cascade)
  
  @@map("build_counts")
}

model ScanResult {
  id               String   @id @default(cuid())
  projectId        String
  status           String   // "completed", "failed", "partial"
  totalBuilds      Int      @default(0)
  totalTargets     Int      @default(0)
  scannedTargets   Int      @default(0)
  errorMessage     String?
  startedAt        DateTime @default(now())
  completedAt      DateTime?
  durationMs       Int?
  
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  buildCounts BuildCount[]
  
  @@map("scan_results")
}

model LogEntry {
  id        Int      @id @default(autoincrement())
  level     String   // "info", "warning", "error", "success"
  message   String
  details   String?
  timestamp DateTime @default(now())
  source    String?  // hangi modülden geldiği
  
  @@map("log_entries")
}
